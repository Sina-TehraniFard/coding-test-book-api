plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.9.25'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.9.25'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'nu.studer.jooq' version '9.0'
    id 'org.flywaydb.flyway' version '8.5.13'
}

group = 'quocard.com'
version = '0.0.1-SNAPSHOT'
description = 'coding-test-book-api'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    runtimeOnly 'org.postgresql:postgresql'
    jooqGenerator 'org.postgresql:postgresql'

    testImplementation "io.kotest:kotest-runner-junit5:5.9.1"
    testImplementation "io.kotest:kotest-assertions-core:5.9.1"
    testImplementation "io.kotest.extensions:kotest-extensions-spring:1.1.3"
    testImplementation "io.mockk:mockk:1.13.11"
    testImplementation "com.ninja-squad:springmockk:4.0.2"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
    testImplementation 'com.h2database:h2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

kotlin {
    compilerOptions {
        freeCompilerArgs.addAll '-Xjsr305=strict'
    }
}

tasks.named('test') {
    useJUnitPlatform()
    
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

jooq {
    version.set('3.19.25')
    configurations {
        create("main") {
            generateSchemaSourceOnCompilation.set(true)
            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = 'jdbc:postgresql://localhost:5432/appdb'
                    user = 'app'
                    password = 'app'
                }
                generator {
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
                    }
                    target {
                        packageName = 'com.quocard.generated.jooq'
                        directory = "$buildDir/generated-src/jooq/main"
                    }
                    generate {
                        daos = true
                        pojos = true
                        fluentSetters = true
                    }
                }
            }
        }
    }
}

sourceSets {
    main.java.srcDir("$buildDir/generated-src/jooq/main")
}

flyway {
    url = 'jdbc:postgresql://localhost:5432/appdb'
    user = 'app'
    password = 'app'
    locations = ['filesystem:src/main/resources/db/migration']
    baselineOnMigrate = true
}
